/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Evernote.EDAM.NoteStore
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AdImpressions : TBase
  {
    private int _adId;
    private int _impressionCount;
    private int _impressionTime;

    public int AdId
    {
      get
      {
        return _adId;
      }
      set
      {
        __isset.adId = true;
        this._adId = value;
      }
    }

    public int ImpressionCount
    {
      get
      {
        return _impressionCount;
      }
      set
      {
        __isset.impressionCount = true;
        this._impressionCount = value;
      }
    }

    public int ImpressionTime
    {
      get
      {
        return _impressionTime;
      }
      set
      {
        __isset.impressionTime = true;
        this._impressionTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool adId;
      public bool impressionCount;
      public bool impressionTime;
    }

    public AdImpressions() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              AdId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ImpressionCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              ImpressionTime = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AdImpressions");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.adId) {
        field.Name = "adId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AdId);
        oprot.WriteFieldEnd();
      }
      if (__isset.impressionCount) {
        field.Name = "impressionCount";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ImpressionCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.impressionTime) {
        field.Name = "impressionTime";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ImpressionTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AdImpressions(");
      sb.Append("AdId: ");
      sb.Append(AdId);
      sb.Append(",ImpressionCount: ");
      sb.Append(ImpressionCount);
      sb.Append(",ImpressionTime: ");
      sb.Append(ImpressionTime);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
