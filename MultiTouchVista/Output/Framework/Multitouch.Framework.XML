<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Multitouch.Framework</name>
    </assembly>
    <members>
        <member name="T:Multitouch.Framework.Input.ContactHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Multitouch.Framework.Input.ContactHandler.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Multitouch.Framework.Input.ContactHandler"/> class.
            </summary>
            <param name="handle">Window handle for which contacts should be received</param>
            <remarks>
            If /// <paramref name="handle"/> is <c>IntPtr.Zero</c> contacts for all windows will be received
            </remarks>
        </member>
        <member name="M:Multitouch.Framework.Input.ContactHandler.#ctor(System.IntPtr,System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Multitouch.Framework.Input.ContactHandler"/> class.
            </summary>
            <param name="handle">Window handle for which contacts should be received</param>
            <param name="relativeTo">Contacts coordinates will be relative to this window handle</param>
            <remarks>
            If <paramref name="handle"/> is <c>IntPtr.Zero</c> contacts for all windows will be received
            Use <c>IntPtr.Zero</c> in <paramref name="relativeTo"/> to get x,y in screen coordinates.
            </remarks>
        </member>
        <member name="M:Multitouch.Framework.Input.ContactHandler.ReceiveImageType(Multitouch.Framework.Input.ImageType,System.Boolean)">
            <summary>
            Sets a value indicating whether you want to receive image of a specified type.
            </summary>
            <param name="imageType">Type of the image.</param>
            <param name="value">if set to <c>true</c> images will be received.</param>
            <returns>Returns a value indicating whether image of specified type will be really received</returns>
        </member>
        <member name="E:Multitouch.Framework.Input.ContactHandler.Frame">
            <summary>
            Indicates that a frame from camera is received
            </summary>
        </member>
        <member name="E:Multitouch.Framework.Input.ContactHandler.NewContact">
            <summary>
            A new contact is on surface
            </summary>
        </member>
        <member name="E:Multitouch.Framework.Input.ContactHandler.ContactMoved">
            <summary>
            Contact has been moved
            </summary>
        </member>
        <member name="E:Multitouch.Framework.Input.ContactHandler.ContactRemoved">
            <summary>
            Contact has been removed
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.ContactHandler.Handle">
            <summary>
            Window handle.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="P:Multitouch.Framework.Input.ContactHandler.RelativeTo">
            <summary>
            x,y will be relative to this window handle
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.ContactHandler.ReceiveEmptyFrames">
            <summary>
            Gets or sets a value indicating whether Frame event will be raise if no contact events are present.
            </summary>
        </member>
        <member name="T:Multitouch.Framework.Input.NativeMethods.POINT">
            <summary>
            Wrapper around the Winapi POINT type.
            </summary>
        </member>
        <member name="F:Multitouch.Framework.Input.NativeMethods.POINT.X">
            <summary>
            The X Coordinate.
            </summary>
        </member>
        <member name="F:Multitouch.Framework.Input.NativeMethods.POINT.Y">
            <summary>
            The Y Coordinate.
            </summary>
        </member>
        <member name="M:Multitouch.Framework.Input.NativeMethods.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new POINT.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:Multitouch.Framework.Collections.ReadOnlyDictionary`2">
            <summary>
            Read only implementation of <see cref="T:System.Collections.IDictionary"/> interface.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Multitouch.Framework.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Multitouch.Framework.Collections.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:Multitouch.Framework.Collections.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Multitouch.Framework.Collections.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.-or-<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Multitouch.Framework.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Multitouch.Framework.Collections.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.</param>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Multitouch.Framework.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Multitouch.Framework.Collections.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:Multitouch.Framework.Collections.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>returns true.</returns>
        </member>
        <member name="P:Multitouch.Framework.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <see cref="!:TValue"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Multitouch.Framework.Collections.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="P:Multitouch.Framework.Collections.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="T:Multitouch.Framework.Input.Contact">
            <summary>
            Represents some contact on the surface
            </summary>
        </member>
        <member name="M:Multitouch.Framework.Input.Contact.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Multitouch.Framework.Input.Contact.Area">
            <summary>
            Area of a contact
            </summary>
            <value>The area.</value>
        </member>
        <member name="P:Multitouch.Framework.Input.Contact.Bounds">
            <summary>
            Bounding box of a contact
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.Contact.Id">
            <summary>
            Id of a contact
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.Contact.MajorAxis">
            <summary>
            Major axis for an ellipse
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.Contact.MinorAxis">
            <summary>
            Minor axis for an ellipse
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.Contact.Orientation">
            <summary>
            Orientation
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.Contact.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.Contact.State">
            <summary>
            Contact state
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.Contact.RelativeTo">
            <summary>
            Coordinates are relative to this window
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.Contact.Timestamp">
            <summary>
            Timestamp of frame
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.Contact.Hwnd">
            <summary>
            Window Handle
            </summary>
        </member>
        <member name="T:Multitouch.Framework.Input.ImageType">
            <summary>
            Image type
            </summary>
        </member>
        <member name="F:Multitouch.Framework.Input.ImageType.Normalized">
            <summary>
            Normalized image from camera
            </summary>
        </member>
        <member name="F:Multitouch.Framework.Input.ImageType.Binarized">
            <summary>
            Binarized image from camera
            </summary>
        </member>
        <member name="T:Multitouch.Framework.Input.FrameEventArgs">
            <summary>
            Frame event arguments
            </summary>
        </member>
        <member name="M:Multitouch.Framework.Input.FrameEventArgs.TryGetImage(Multitouch.Framework.Input.ImageType,System.Int32,System.Int32,System.Int32,System.Int32,Multitouch.Framework.Input.ImageData@)">
            <summary>
            Tries the get camera image.
            </summary>
            <param name="imageType">Type of the image.</param>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="imageData">The image data.</param>
            <returns></returns>
        </member>
        <member name="P:Multitouch.Framework.Input.FrameEventArgs.Contacts">
            <summary>
            All contacts in this frame.
            </summary>
        </member>
        <member name="T:Multitouch.Framework.Input.MouseHelper">
            <summary>
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.MouseHelper.SingleMouseFallback">
            <summary>
            </summary>
        </member>
        <member name="T:Multitouch.Framework.Input.ContactState">
            <summary>
            State of contact
            </summary>
        </member>
        <member name="F:Multitouch.Framework.Input.ContactState.New">
            <summary>
            New contact
            </summary>
        </member>
        <member name="F:Multitouch.Framework.Input.ContactState.Removed">
            <summary>
            Contact was removed since last event.
            </summary>
        </member>
        <member name="F:Multitouch.Framework.Input.ContactState.Moved">
            <summary>
            Contact was moved since last event.
            </summary>
        </member>
        <member name="T:Multitouch.Framework.Input.ImageData">
            <summary>
            Image data
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.ImageData.Width">
            <summary>
            Image width
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.ImageData.Height">
            <summary>
            Image height
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.ImageData.Stride">
            <summary>
            Image stride
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.ImageData.BitsPerPixel">
            <summary>
            Image bits per pixel
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.ImageData.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="T:Multitouch.Framework.MultitouchException">
            <summary>
            This type of exception is used to alert of any exception in MultiTouchVista.
            </summary>
        </member>
        <member name="M:Multitouch.Framework.MultitouchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Multitouch.Framework.MultitouchException"/> class.
            </summary>
        </member>
        <member name="M:Multitouch.Framework.MultitouchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Multitouch.Framework.MultitouchException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Multitouch.Framework.MultitouchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Multitouch.Framework.MultitouchException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Multitouch.Framework.MultitouchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Multitouch.Framework.MultitouchException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Multitouch.Framework.Input.ContactEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.ContactEventArgs.Contact">
            <summary>
            Contact
            </summary>
            <value>The contact.</value>
        </member>
        <member name="T:Multitouch.Framework.Input.CommunicationLogic">
            <summary>
            Logic that communicates with Multitouch service.
            </summary>
        </member>
        <member name="M:Multitouch.Framework.Input.CommunicationLogic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Multitouch.Framework.Input.CommunicationLogic"/> class.
            </summary>
        </member>
        <member name="M:Multitouch.Framework.Input.CommunicationLogic.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Multitouch.Framework.Input.CommunicationLogic.Instance">
            <summary>
            Gets the instance of communication logic.
            </summary>
            <value>The instance.</value>
        </member>
    </members>
</doc>
