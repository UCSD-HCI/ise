//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Multitouch.Service.Tests.Services {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageType", Namespace="http://schemas.datacontract.org/2004/07/Multitouch.Contracts")]
    public enum ImageType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Normalized = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Binarized = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FrameData", Namespace="http://schemas.datacontract.org/2004/07/Multitouch.Service.Logic.ExternalInterfac" +
        "es")]
    [System.SerializableAttribute()]
    public partial class FrameData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Multitouch.Service.Tests.Services.ContactData[] ContactsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Multitouch.Service.Tests.Services.ImageData[] ImagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Multitouch.Service.Tests.Services.ContactData[] Contacts {
            get {
                return this.ContactsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactsField, value) != true)) {
                    this.ContactsField = value;
                    this.RaisePropertyChanged("Contacts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Multitouch.Service.Tests.Services.ImageData[] Images {
            get {
                return this.ImagesField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagesField, value) != true)) {
                    this.ImagesField = value;
                    this.RaisePropertyChanged("Images");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactData", Namespace="http://schemas.datacontract.org/2004/07/Multitouch.Service.Logic.ExternalInterfac" +
        "es")]
    [System.SerializableAttribute()]
    public partial class ContactData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AreaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Windows.Rect BoundsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.IntPtr HwndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MajorAxisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MinorAxisField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OrientationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Windows.Point PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Multitouch.Service.Tests.Services.ContactState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Area {
            get {
                return this.AreaField;
            }
            set {
                if ((this.AreaField.Equals(value) != true)) {
                    this.AreaField = value;
                    this.RaisePropertyChanged("Area");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Windows.Rect Bounds {
            get {
                return this.BoundsField;
            }
            set {
                if ((this.BoundsField.Equals(value) != true)) {
                    this.BoundsField = value;
                    this.RaisePropertyChanged("Bounds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.IntPtr Hwnd {
            get {
                return this.HwndField;
            }
            set {
                if ((this.HwndField.Equals(value) != true)) {
                    this.HwndField = value;
                    this.RaisePropertyChanged("Hwnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MajorAxis {
            get {
                return this.MajorAxisField;
            }
            set {
                if ((this.MajorAxisField.Equals(value) != true)) {
                    this.MajorAxisField = value;
                    this.RaisePropertyChanged("MajorAxis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double MinorAxis {
            get {
                return this.MinorAxisField;
            }
            set {
                if ((this.MinorAxisField.Equals(value) != true)) {
                    this.MinorAxisField = value;
                    this.RaisePropertyChanged("MinorAxis");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Orientation {
            get {
                return this.OrientationField;
            }
            set {
                if ((this.OrientationField.Equals(value) != true)) {
                    this.OrientationField = value;
                    this.RaisePropertyChanged("Orientation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Windows.Point Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Multitouch.Service.Tests.Services.ContactState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImageData", Namespace="http://schemas.datacontract.org/2004/07/Multitouch.Service.Logic.ExternalInterfac" +
        "es")]
    [System.SerializableAttribute()]
    public partial class ImageData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BitsPerPixelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HeightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StrideField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Multitouch.Service.Tests.Services.ImageType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WidthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BitsPerPixel {
            get {
                return this.BitsPerPixelField;
            }
            set {
                if ((this.BitsPerPixelField.Equals(value) != true)) {
                    this.BitsPerPixelField = value;
                    this.RaisePropertyChanged("BitsPerPixel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Height {
            get {
                return this.HeightField;
            }
            set {
                if ((this.HeightField.Equals(value) != true)) {
                    this.HeightField = value;
                    this.RaisePropertyChanged("Height");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stride {
            get {
                return this.StrideField;
            }
            set {
                if ((this.StrideField.Equals(value) != true)) {
                    this.StrideField = value;
                    this.RaisePropertyChanged("Stride");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Multitouch.Service.Tests.Services.ImageType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactState", Namespace="http://schemas.datacontract.org/2004/07/Multitouch.Contracts")]
    public enum ContactState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        New = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Removed = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Moved = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Services.IApplicationInterface", CallbackContract=typeof(Multitouch.Service.Tests.Services.IApplicationInterfaceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IApplicationInterface {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/CreateSession")]
        void CreateSession();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IApplicationInterface/RemoveSession")]
        void RemoveSession();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/AddWindowHandleToSession")]
        void AddWindowHandleToSession(System.IntPtr windowHandle);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/RemoveWindowHandleFromSession")]
        void RemoveWindowHandleFromSession(System.IntPtr windowHandle);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/SendEmptyFrames")]
        void SendEmptyFrames(bool value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IApplicationInterface/SendImageType", ReplyAction="http://tempuri.org/IApplicationInterface/SendImageTypeResponse")]
        bool SendImageType(Multitouch.Service.Tests.Services.ImageType imageType, bool value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IApplicationInterfaceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IApplicationInterface/Frame")]
        void Frame(Multitouch.Service.Tests.Services.FrameData data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IApplicationInterfaceChannel : Multitouch.Service.Tests.Services.IApplicationInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ApplicationInterfaceClient : System.ServiceModel.DuplexClientBase<Multitouch.Service.Tests.Services.IApplicationInterface>, Multitouch.Service.Tests.Services.IApplicationInterface {
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ApplicationInterfaceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void CreateSession() {
            base.Channel.CreateSession();
        }
        
        public void RemoveSession() {
            base.Channel.RemoveSession();
        }
        
        public void AddWindowHandleToSession(System.IntPtr windowHandle) {
            base.Channel.AddWindowHandleToSession(windowHandle);
        }
        
        public void RemoveWindowHandleFromSession(System.IntPtr windowHandle) {
            base.Channel.RemoveWindowHandleFromSession(windowHandle);
        }
        
        public void SendEmptyFrames(bool value) {
            base.Channel.SendEmptyFrames(value);
        }
        
        public bool SendImageType(Multitouch.Service.Tests.Services.ImageType imageType, bool value) {
            return base.Channel.SendImageType(imageType, value);
        }
    }
}
